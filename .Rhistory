m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(mat.or.vec())
cacheSolve(m)
cacheSolve(matrix)
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
makeCacheMatrix <- function(x = matrix()) {
## making a square invertible matrix
## with a list of functions to:
## set the matirx
## get the matrix
## set the inverse
## get the inverse
inv = NULL
set = function(y) {
## <<- assigns a value to an object in its environment which is
## different to the current environment
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv<<-inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
## This function will calculate the inverse of the vector which happens
## be a matrix but first it will check to see if it has already been calculated
## and cached. If so it will use this instead of calculating the inverse.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if(!is.null(inv)){
message("Getting cached data...")
return(inv)
}
mat = x$get()
inv = solve(mat, ...)
x$setinv(inv)
return(inv)
}
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
## making a square invertible matrix
## with a list of functions to:
## set the matirx
## get the matrix
## set the inverse
## get the inverse
inv = NULL
set = function(y) {
## <<- assigns a value to an object in its environment which is
## different to the current environment
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv<<-inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
## This function will calculate the inverse of the vector which happens
## be a matrix but first it will check to see if it has already been calculated
## and cached. If so it will use this instead of calculating the inverse.
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getinv()
if(!is.null(inv)){
message("Getting cached data...")
return(inv)
}
matrix = x$get()
inv = solve(matrix, ...)
x$setinv(inv)
return(inv)
}
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
## making a square invertible matrix
## with a list of functions to:
## set the matirx
## get the matrix
## set the inverse
## get the inverse
inv <- NULL
set <- function(y) {
## <<- assigns a value to an object in its environment which is
## different to the current environment
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv<<-inverse
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
## This function will calculate the inverse of the vector which happens
## be a matrix but first it will check to see if it has already been calculated
## and cached. If so it will use this instead of calculating the inverse.
cacheSolve <- function(x=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("Getting cached data...")
return(inv)
}
matrix <- x$get()
inv <- solve(matrix, ...)
x$setinv(inv)
return(inv)
}
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
cacheSolve(x)
x
makeCacheMatrix <- function(p = matrix()) {
## making a square invertible matrix
## with a list of functions to:
## set the matirx
## get the matrix
## set the inverse
## get the inverse
inv <- NULL
set <- function(y) {
## <<- assigns a value to an object in its environment which is
## different to the current environment
p<<- y
inv <<- NULL
}
get <- function() p
setinv <- function(inverse) inv<<-inverse
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
## This function will calculate the inverse of the vector which happens
## be a matrix but first it will check to see if it has already been calculated
## and cached. If so it will use this instead of calculating the inverse.
cacheSolve <- function(p=matrix(), ...) {
## Return a matrix that is the inverse of 'x'
inv <- p$getinv()
if(!is.null(inv)){
message("Getting cached data...")
return(inv)
}
matrix <- p$get()
inv <- solve(matrix, ...)
p$setinv(inv)
return(inv)
}
cacheSolve(p)
cacheSolve(x)
View(x)
View(x)
View(x)
View(x)
x<-x
x
x<<-x
x
x<-matrix(6,6,6)
x
x<-matrix(2,2,1)
x
x<-matrix(1,2,2)
x
solve(x)
x<-martix(1:12,3,3)
x
x<-martix(1:9,3,3)
x <- matrix(1:12,3,3)
x
solve(x)
x <- matirx(rnorm,3,3)
x <- matirx(rnorm(),3,3)
x <- matrix(rnorm,3,3)
x
x$getinverse
x$get()
matrix1 <- matrix(1:9,3,3)
matrix1
matrix1$get()
matrix2 <- makeCacheMatrix(matrix(1:9,3,3))
matrix2
matrix2$get()
matrix2$getinverse()
matrix2$getinv()
cachesolve(matrix2)
cacheSolve(matrix2)
solve(matrix2)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("Getting cached data...")
return(inv)
}
matrix <- x$get()
inv <- solve(matrix, ...)
x$setinv(inv)
return(inv)
}
cachesolve(matrix2)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
cacheSolve(matrix2)
swirl()
library(swirl)
swirl()
my_vector <- vector(1:20)
my_vector <- function(1:20)
my_vector <- (1:20)
my_vector <- c(1:20)
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2(1:20,4,5)
my_matrix2 <- (1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
headings <- c("patient", "age", "weight", "bp", "rating", "test")
headings <- ("patient", "age", "weight", "bp", "rating", "test")
headings <- c("patient","age","weight","bp","rating","test")
headings <- c("patient","age","weight","bp","rating","test")
info()
heading <- c("patient","age","weight","bp","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(cnames, my_data)
colnames(cnames, my_data)
colnames(my_data, cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(fales == true) == FALSE
(FALSE == TRUE) == FALSE
6 ==7
6<7
10<=10
5!=7
5!=7
(5=7)==!FALSE
(5==7)==!FALSE
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints < 5
ints < 5
ints > 5
?ints
??ints
ints
?par
boring_function <- function(x) {
x
}
boring_function(4.5)
19/3
my_mean(c(4,5,10))
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
x<-sum(my_vector)
y<-length(my_vector)
x/y
}
my_mean(c(4,5,10))
my_mean()
7%%3
7%%4
10%%1
10%%5
10%%10
?%%
some_funcion <- function(func)
some_funcion <- function(func){}
some_funcion <- function(func){}
some_funcion <- function(func){func(2,4)}
some_function <- function(func){
func(2, 4)
}
some_funcion()
args(some_funcion)
func()
sd(1.4, 3.6, 7.9, 8.8))
sd(1.4, 3.6, 7.9, 8.8)
sd(c(1.4, 3.6, 7.9, 8.8))
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 9)
evaluate(function(x){x+9}, 9)
evaluate(function(x){x}, 9)
evaluate(sum(x){x}, 9)
evaluate(sum(x), 9)
evaluate(sum(c(2,2,2), 9)
getwd
ls
setwd(datasciencecoursera)
getwd
getwd()
library(swirl)
swirl()
head(flags)
library(flags)
ls
getwd()
ls()
head(flags)
library(list.file)
library(flag)
head(flags)
http://archive.ics.uci.edu/ml/datasets/Flags
head(flags)
head(flags.R)
library(swirl)
swirl()
head(flags)
flags <- flags
flags2 <- flags
head(flags2)
info()
bye()
head(flags)
?sapply
?vapply
?tapply
?vapply
sapply(flags$population, flags$landmass)
sapply(flags$population, flags$landmass, mean)
flags$landmass
sapply(flags$population, flags$landmass, summary)
lapply(flags$landmass, summary)
sapply(flags$landmass, summary)
vapply(flags$landmass, summary)
tapply(flags$landmass, summary)
tapply(flags$landmass, flags$population, summary)
tapply(flags$population, flags$landmass, summary)
mat <- tapply(flags$population, flags$landmass, summary)
as.data.frame(mat)
mat <- tapply(flags$population, flags$landmass, summary)
tapply(flags$population, flags$landmass, summary)
plot(mat)
mat
may.frame <- as.data.frame(mat)
may.frame
plot(may.frame)
matrix2
matrix2()
matrix1
plot(matrix1)
dim.data.frame(may.frame)
may.frame
mat
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
head(flags)
plot(flags$population, flags$landmass)
